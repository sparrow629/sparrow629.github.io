<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[2022]]></title>
      <url>%2F2022%2F08%2F25%2F2022%2F</url>
      <content type="text"><![CDATA[2022： 2022 is a milestone 总结一下2022的转折点]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Recently]]></title>
      <url>%2F2017%2F07%2F24%2FRecently%2F</url>
      <content type="text"><![CDATA[最近这个阶段，感觉常常处于一种纠结与无奈的后悔状态，令我有点难受。发现现实和想象差的有点远，着实郁闷了一两个星期，虽然现在并没有完全走出那种心理状态，但是能够坦然面对了。有些话只能在心里。最近打算边上班边着手开始Instagram计划-2017-07-24 昨晚第一次和室友们吃火锅吃到晚上11点！又丰富了一种人生体验。接着上周的框架，今天花了一天时间把Instagram爬虫写完啦~昨晚吃完火锅，11点回家看到上周一直没分析出的静态页面如何获取JS的动态内容，突然来了灵感，直接源码静态分析JS的内容，给我找到了隐藏的url地址。今天用正则一步一步的尝试把一个没有换行符的scrypt代码解析出来了。一梭子代码就写完了，顿时觉得，就算动态调取，静态源码上也能找到漏洞，目前所有写过的社交网站爬虫都实现了用静态代码分析直接爬取内容。 接下来打算研究一下，带后台自动回复脚本的的微信功能公众号，把Ins爬虫部署上去，做一个能保存Ins图片的公众号，在这里先立个Flag，等我实现了就摘掉~ -2017-08-06 昨晚第一次和室友们吃火锅吃到晚上11点，第一次吃火锅吃醉了！！！吃完头皮麻麻的，也是一种奇妙的人生体验吧！聊了聊各自近况里的奇闻异事，说实话，从话里行间，我还是能感受到，正真内心追寻的还是想到达一个对程序员相对自由友好的开发环境，做自己感兴趣的事情。 结合近期的境遇和心境，不断反思自己和周遭，明确了未来的短暂的方向，并在此开始为之努力，希望结果不要辜负我的努力。 越长大越发现，自己不能控制的条件越来越多。幼年的时候，想要什么只要会撒娇，伸手就能得到；再大些的时候，通过自己优异的表现，可以换取所有自己想要的“一切”；到高中的时候，通过努力学习好好考试，可以进入理想的大学；到大学的时候，通过跟多的努力，考前突击复习，平日各种自由，依旧可以得到想要的生活状态; 研究生阶段，发现欲望更远更大了，我依旧有父母的后盾，依旧在象牙塔里看社会，开始思考，但并没有真的忧虑；到真正步入社会，才发现到这个时候，面临的现实太严酷了，以前想要做什么基本靠爸妈或者努力都能得到，然而现在，什么都没办法改变，房子车子票子，欲望依旧在成长，然而触手的长度与欲望的高度并没有成为正比，欲望远超能力。 我想这是我心态崩了的根本原因吧。 每每想起未知的未来，我都心生迷惘，这里的未来，是我不知道我何时能够成为典型中国社会的一个成功青年，因为我害怕失去优越感的滋味。到这里可以总结一下心情低谷的原因，现实没有按照我预想的剧本发展，偏差导致的失落感被磕磕绊绊的小挫折无限放大，直到心态崩了。 好在及时认清并调整期望，照着现实的轨迹修正偏离中国社会主流的三观。-2017-08-06]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[selenium101-Mac环境下ChromeDriver配置]]></title>
      <url>%2F2017%2F03%2F26%2Fselenium101-Mac%E7%8E%AF%E5%A2%83%E4%B8%8BChromeDriver%E9%85%8D%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[介绍配置之前我想说一说我的心路历程其实很早之前就了解了selenium，也是曾今在写豆瓣相册爬虫(有兴趣戳一下源码)的时候遇到麻烦的反爬机制的困难时，查到想用的方法之一，但是本着尽量不要曲线救国的想法，想出了更好的解决办法。来说说Selenium + Python + BrowserDriver其实是用来作web自动化检测的好工具，作用是模拟人的操作行为在浏览器里自动操作网页。简单来说就是基于网页的测试，比如往表单里填各种乱七八糟的值，戳一戳提交按钮，看看有什么bug。 然而Selenium + Python 配合BeautifulSoup或者re也可以成为模拟真实用户的爬虫，这个优点就是可以自如应对动态加载的网页的，还包括需要登录的网页。虽然我觉得所有动态加载网页都可以有办法用静态方式，分析链接和css布局来爬取。但是多一条路多一种选择，走完了才知道哪条路远一些，喊声最大的一般都是在起点犹豫的。当然用Selenium爬取缺点也很明显，就是当爬取得量一大速度明显很慢，满足不了大数据量的爬取方式。我觉得因为这是一种模拟用户行为，当正常爬虫已经得到请求了，这边还在submit，所以你说呢（欢迎指正）。 进入正题，环境配置关于如何安装Selenium，不多说了google it.我这里说一下PyCharm的package管理真的是良心，我装了python3.5，之前有一些包在terminal里死活装不上3.5里，找了各种办法，堪比Windows下VS环境配置。最后我发现PyCharm可以对不同版本的包进行一站式管理。1Preferences &gt; Project: name &gt; Project interpreter 添加，删除都可以操作，如果在非系统版本安装遇到问题，先对系统版本的同名package进行操作，比如删除安装。再到你要安装的版本操作，比如Selenium。 接下来说一下安装ChromeDriver，首先下载ChromeDriver executable这里装最新版本就可以了，没有什么版本限制。解压放到一个路径里（只要你能找得到就好），到这里就是路径的配置，其实没有那么麻烦。我选择每次使用时候把chrome driver所在目录作为参数path传给web driver。1driver = webdriver.Chrome('/Users/username/filename/chromedriver') # Optional argument, if not specified will search path. 还有一种就是ChromeDriver目录加入到环境变量1234vim ~/.bash_profileexport PATH=$PATH:ChromeDriver目录(注意，是存放的目录，不是这个文件):wqsource ~/.bash_profile 我用的第一种。因为不是谁的电脑都愿意让你乱动环境变量对吧。下面是官方文档的测试代码：1234567891011import timefrom selenium import webdriverdriver = webdriver.Chrome('/path/to/chromedriver') #Optional argument, if not specified will search path.driver.get('http://www.google.com/xhtml');time.sleep(5) # Let the user actually seesearch_box = driver.find_element_by_name('q')search_box.send_keys('ChromeDriver')search_box.submit()time.sleep(5) # Let the user actually seedriver.quit() 没报错就成功了。如果报错像这样：123&quot;ChromeDriver executable needs to be available in the path. &quot;selenium.common.exceptions.WebDriverException: Message: ChromeDriver executable needs to be available in the path.Please download from http://chromedriver.storage.googleapis.com/index.html and read up at http://code.google.com/p/selenium/wiki/ChromeDriver 毫无疑问你的ChromeDriver路径问题。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Timeline]]></title>
      <url>%2F2017%2F03%2F24%2FTest%2F</url>
      <content type="text"><![CDATA[2017-03-24 Hello world! 2017-03-25 1等时间空闲了把python的学习笔记整理一下，好好回顾一下学习爬虫的经历。想学习一下Selenium。]]></content>
    </entry>

    
  
  
</search>
